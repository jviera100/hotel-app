<!-- Admin.hbs -->
<!-- carusel -->
<section id="carusel" class="carusel container-fluid">
  <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
    <div class="carousel-indicators">
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>
    <div class="carousel-inner">
      <div class="carousel-item active">
        <div class="container text-center py-4">
          <h2>Administración de Usuarios</h2>           
          <div class="mb-1">
            <button class="btn btn-outline-success" id="addUserBtn">Registrar perfil</button>             
          </div>            
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Foto</th>
                  <th>Nombre</th>
                  <th>Email</th>
                  <th>Contraseña</th>
                  <th>Tipo de usuario</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {{#each usuarios}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>
                    <img src="/img/{{this.foto}}" alt="Foto del usuario" class="img-fluid img-thumbnail">
                  </td>
                  <td>{{this.username}}</td>
                  <td>{{this.email}}</td>
                  <td>{{this.password}}</td>
                  <td>{{this.tipo_usuario}}</td>
                  {{!-- botones antiguos si abren modal 
                  <td>
                    <button type="submit" class="btn btn-outline-warning" id="updateUserBtn">Actualizar perfil</button>       
                    <button class="btn btn-outline-danger" id="deleteUserBtn">Eliminar perfil y reserva</button> 
                  </td>
                  --}}
                  {{!-- botones nuevos no abren modal --}}
                  <td>
                    <button type="button" class="btn btn-outline-warning updateUserBtn">Actualizar perfil</button>       
                    <button type="button" class="btn btn-outline-danger deleteUserBtn" data-email="{{this.email}}">Eliminar perfil y reserva</button> 
                  </td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="carousel-item">
        <div class="container text-center py-4">
          <h2>Administración de Reservas</h2>                       
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Fecha Reserva</th>
                  <th>Fecha Salida</th>
                  <th>Habitación</th>
                  <th>Cliente</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {{#each reservas}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>{{this.fecha_reserva}}</td>
                  <td>{{this.fecha_salida}}</td>
                  <td>{{this.habitacion_numero}}</td>
                  <td>{{this.nombre_usuario}}</td>
                  <td>
                    <!-- Botón para actualizar reserva -->
                    <button type="submit" class="btn btn-outline-warning updateReservationBtn">Actualizar reserva</button>
                    <!-- Botón para reservar o eliminar reserva dependiendo del estado de disponibilidad -->
                    <td>
                      {{#if this.disponibilidad}}
                        <button class="btn btn-outline-success reservarBtn" 
                          data-id="{{this.id}}" 
                          data-habitacion-id="{{this.habitacion_id}}" 
                          onclick="mostrarCalendario(this)">Reservar
                        </button>
                        <div id="calendario-{{this.id}}" class="calendario-container" style="display: none;">
                          <!-- Aquí se mostraría el calendario -->
                        </div>
                      {{else}}
                        <button class="btn btn-outline-danger deleteReservationBtn" data-id="{{this.id}}" data-habitacion-id="{{this.habitacion_id}}">Eliminar reserva</button>
                      {{/if}}
                    </td>
                  </td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="carousel-item">
        <div class="container text-center py-4">
          <h2>Administración de Habitaciones</h2>            
          <div class="mb-1">
            <button class="btn btn-outline-success" id="addRoomBtn">Agregar habitación</button>             
          </div>          
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Número</th>
                  <th>Tipo de Habitación</th>
                  <th>Descripción</th>
                  <th>Precio</th>
                  <th>Disponibilidad</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {{#each habitaciones}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>{{this.numero}}</td>
                  <td>{{tipoHabitacionTexto this.tipo_habitacion_id}}</td>
                  <td>{{this.descripcion}}</td>
                  <td>{{this.precio}}</td>
                  <td>{{disponibilidadTexto this.disponibilidad}}</td>
                  <td>
                    <button type="submit" class="btn btn-outline-warning" id="updateRoomBtn">Actualizar habitación</button>       
                    <button class="btn btn-outline-danger" id="deleteRoomBtn">Eliminar habitación</button>
                  </td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
  </div>
</section>

<!-- Modal para editar perfil -->
<div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title text-center w-100" id="editProfileModalLabel">Editar Perfil</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Formulario de edición -->
        <form id="editProfileForm">
          <div class="row mb-3">
            <div class="col-md-6">
              <label>ver actual foto de perfil</label>
              <img id="fotoTablePreviewModal" src="" alt="Foto de perfil" class="img-fluid">
            </div>
            <div class="col-md-6 d-flex align-items-center">  {{!--flex permite ver el label al lado del input en el formulario del modal --}}
              <label for="foto" class="form-label me-2">subir nueva foto de perfil</label>
              <input type="file" name="foto" class="form-control" id="foto">
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
                <label>ver nueva foto de perfil</label>
                <!-- Nueva imagen seleccionada -->
                <img id="fotoUpLoadPreviewModal" src="" alt="Nueva Foto de perfil" class="img-fluid">
            </div>
          </div>          
          <div class="row mb-3">
            <div class="col-md-6 d-flex align-items-center">
              <label for="username" class="form-label me-2">Nombre</label>
              <input name="username" class="form-control" id="username">
            </div>
            <div class="col-md-6 d-flex align-items-center">
              <label for="email" class="form-label me-2">Email</label>
              <input type="email" name="email" class="form-control" id="email">
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6 d-flex align-items-center">
              <label for="password" class="form-label me-2">Password</label>
              <input type="password" name="password" class="form-control" id="password">
            </div>
            <div class="col-md-6 d-flex align-items-center">
              <label for="tipo_usuario" class="form-label me-2">Tipo de usuario</label>
              <input name="tipo_usuario" class="form-control" id="tipo_usuario">
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" id="saveProfileChangesBtn">Guardar Cambios</button>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancelar</button>        
      </div>
    </div>
  </div>
</div>

<!-- logica javascript fronted -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const addUserBtn = document.querySelector("#addUserBtn"); //selector id de boton agregar perfil
    const updateUserBtns = document.querySelectorAll(".updateUserBtn"); //selector class de boton actualizar perfil
    const deleteUserBtns = document.querySelectorAll(".deleteUserBtn"); //selector class de boton eliminar perfil
    const editUserModal = new bootstrap.Modal(document.getElementById('editProfileModal')); // Instanciar el modal
    const updateReservationBtns = document.querySelectorAll(".updateReservationBtn");
    const reservarBtns = document.querySelectorAll(".reservarBtn");
    const deleteReservationBtns = document.querySelectorAll(".deleteReservationBtn");


    addUserBtn.addEventListener("click", () => {
        window.location.href = "/admin/registro"; // Redirige a la vista de /admin/registro
    });

    // Event listener para los botones de actualizar usuario
    updateUserBtns.forEach(button => {
        button.addEventListener("click", () => {
            const row = button.closest("tr"); // Obtener la fila de la tabla
            const email = row.querySelector("td:nth-child(4)").textContent; // Obtener el correo electrónico del usuario de la cuarta celda de la fila
            const username = row.querySelector("td:nth-child(3)").textContent; // Obtener el nombre de usuario de la tercera celda de la fila
            const password = row.querySelector("td:nth-child(5)").textContent; // Obtener la contraseña de la quinta celda de la fila
            const tipo_usuario = row.querySelector("td:nth-child(6)").textContent; // Obtener el tipo de usuario de la sexta celda de la fila     
            const foto = row.querySelector("td:nth-child(2) img").getAttribute("src");       

            // Llenar el formulario con los datos del usuario
            document.getElementById('email').value = email;
            document.getElementById('username').value = username;
            document.getElementById('password').value = password;            
            document.getElementById('tipo_usuario').value = tipo_usuario;  
            document.getElementById('fotoTablePreviewModal').src = foto;          

            // Cambiar la imagen del perfil en el modal
            const foto = row.querySelector("td:nth-child(2) img").getAttribute("src");
            console.log("Foto actual:", foto);
            document.getElementById('fotoTablePreviewModal').src = foto;
            console.log("Foto previa en el modal:", document.getElementById('fotoTablePreviewModal').src);


            // Mostrar el modal de edición
            editUserModal.show();
        });
    });

    
    // Event listener para los botones de eliminar usuario
    deleteUserBtns.forEach(button => {
        button.addEventListener("click", () => {
            const email = button.getAttribute('data-email');
            handleProfileAction('delete', email);
        });
    });

    async function handleProfileAction(action, email) {
        if (!email) {
            alert('Correo electrónico del usuario no disponible.');
            return;
        }

        try {
            let response;
            if (action === 'delete') {
                response = await axios.delete(`/perfil/${email}`);
                if (response.status === 200) {
                    alert("Perfil eliminado con éxito");
                    window.location = `/`; // Redirigir a la página de inicio después de eliminar el perfil
                } else {
                    alert("Ha ocurrido un error al intentar eliminar el perfil.");
                }
            }
        } catch (error) {
            const errorMessage = error.response.data.message || 'Ha ocurrido un error al procesar la solicitud de perfil.';
            alert(errorMessage);
        }
    }


    // Event listener para el cambio en el input de tipo file
    document.getElementById('foto').addEventListener('change', function(event) {
        const file = event.target.files[0]; // Obtener el archivo de imagen seleccionado
        const reader = new FileReader();

        // Manejar el evento de carga del archivo
        reader.onload = function(e) {
            document.getElementById('fotoTablePreviewModal').src = e.target.result; // Mostrar la vista previa de la imagen de la tabla en el modal           
            document.getElementById('fotoUpLoadPreviewModal').src = e.target.result;// Mostrar la vista previa de la nueva imagen subida en el modal
        };

        // Leer el contenido del archivo como URL de datos
        reader.readAsDataURL(file);
    });

    // Event listener para el envío del formulario dentro del modal
    const editUserForm = document.querySelector("#editProfileForm");
    document.querySelector("#saveProfileChangesBtn").addEventListener("click", async () => {
        const formData = new FormData(editUserForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await axios.put(`/perfil/${data.email}`, formData);
            if (response.status === 200) {
                alert("Perfil actualizado con éxito");  

                // Obtener la fila correspondiente en la tabla
                const row = [...document.querySelectorAll("table tbody tr")].find(tr => tr.querySelector("td:nth-child(4)").textContent === data.email);

                if (row) {
                    // Actualizar los campos de la fila
                    row.querySelector("td:nth-child(3)").textContent = data.username;
                    row.querySelector("td:nth-child(5)").textContent = data.password;
                    row.querySelector("td:nth-child(6)").textContent = data.tipo_usuario;

                    // Actualizar la imagen con un timestamp para forzar la recarga
                    const imgElement = row.querySelector("td:nth-child(2) img");
                    imgElement.src = `/img/${data.foto}?t=${new Date().getTime()}`;
                    console.log("Foto actualizada en la tabla:", imgElement.src);
                }

                // Cerrar el modal
                editUserModal.hide();             

                window.location.reload(); // Recargar la página para reflejar los cambios
            } else {
                alert("Ha ocurrido un error al intentar actualizar el perfil.");
            }
        } catch (error) {
            const errorMessage = error.response.data.message || 'Ha ocurrido un error al procesar la solicitud de perfil.';
            alert(errorMessage);
        }
    });
    const updateReservationBtns = document.querySelectorAll(".updateReservationBtn");
    const deleteReservationBtns = document.querySelectorAll(".deleteReservationBtn");

    // logica calendario

    function mostrarCalendario(button) {
    const reservaId = button.getAttribute("data-id");
    const calendarioId = `calendario-${reservaId}`;
    const calendarioContainer = document.getElementById(calendarioId);

    // Mostrar el calendario si está oculto, ocultarlo si está visible
    if (calendarioContainer.style.display === "none") {
        // Mostrar el calendario
        calendarioContainer.style.display = "block";
        // Aquí puedes inicializar tu biblioteca de calendario (por ejemplo, FullCalendar)
    } else {
        // Ocultar el calendario
        calendarioContainer.style.display = "none";
    }
}


    // Event listener para los botones de reservar
  reservarBtns.forEach(button => {
    button.addEventListener("click", async () => {
      const reservaId = button.getAttribute("data-id");
      const habitacionId = button.getAttribute("data-habitacion-id");
      await reservar(reservaId, habitacionId);
    });
  });

  // Event listener para los botones de eliminar reserva
  deleteReservationBtns.forEach(button => {
    button.addEventListener("click", async () => {
      const reservaId = button.getAttribute("data-id");
      const habitacionId = button.getAttribute("data-habitacion-id");
      await eliminarReserva(reservaId, habitacionId);
    });
  });

  // Función para reservar habitación
  const reservar = async (reservaId, habitacionId) => {
    try {
      const response = await axios.post(`/reservas/${reservaId}/reservar`);
      if (response.status === 200) {
        alert('Habitación reservada con éxito.');
        // Actualizar estado de disponibilidad de la habitación
        actualizarDisponibilidadHabitacion(habitacionId, false);
      } else {
        alert('Ha ocurrido un error al reservar la habitación.');
      }
    } catch (error) {
      const errorMessage = error.response.data.message || 'Ha ocurrido un error al reservar la habitación.';
      alert(errorMessage);
    }
  };

  // Función para eliminar reserva
  const eliminarReserva = async (reservaId, habitacionId) => {
    try {
      const response = await axios.post(`/reservas/${reservaId}/eliminar`);
      if (response.status === 200) {
        alert('Reserva eliminada con éxito.');
        // Actualizar estado de disponibilidad de la habitación
        actualizarDisponibilidadHabitacion(habitacionId, true);
      } else {
        alert('Ha ocurrido un error al eliminar la reserva.');
      }
    } catch (error) {
      const errorMessage = error.response.data.message || 'Ha ocurrido un error al eliminar la reserva.';
      alert(errorMessage);
    }
  };

  // Función para actualizar estado de disponibilidad de la habitación
  const actualizarDisponibilidadHabitacion = (habitacionId, disponibilidad) => {
    const disponibilidadCell = document.getElementById(`disponibilidad-${habitacionId}`);
    if (disponibilidadCell) {
      disponibilidadCell.textContent = disponibilidad ? 'Disponible' : 'No Disponible';
    }
  };
});
//codigo adicional
document.addEventListener("DOMContentLoaded", () => {
    const editUserModal = new bootstrap.Modal(document.getElementById('editProfileModal'));
    const editUserForm = document.querySelector("#editProfileForm");

    document.querySelectorAll(".updateUserBtn").forEach(button => {
        button.addEventListener("click", function() {
            const row = button.closest("tr");
            const email = row.cells[3].textContent;
            const username = row.cells[2].textContent;
            const password = row.cells[4].textContent;
            const tipo_usuario = row.cells[5].textContent;
            const foto = row.cells[1].querySelector("img").src;

            document.getElementById('email').value = email;
            document.getElementById('username').value = username;
            document.getElementById('password').value = password;
            document.getElementById('tipo_usuario').value = tipo_usuario;
            document.getElementById('fotoTablePreviewModal').src = foto;

            editUserModal.show();
        });
    });

    document.getElementById('foto').addEventListener('change', function(event) {
        const file = event.target.files[0];
        const reader = new FileReader();
        reader.onload = function(e) {
            document.getElementById('fotoTablePreviewModal').src = e.target.result;
            document.getElementById('fotoUpLoadPreviewModal').src = e.target.result;
        };
        reader.readAsDataURL(file);
    });

    document.querySelector("#saveProfileChangesBtn").addEventListener("click", async () => {
        const formData = new FormData(editUserForm);
        try {
            const response = await axios.put(`/perfil/${formData.get('email')}`, formData);
            if (response.status === 200) {
                alert("Perfil actualizado con éxito");
                window.location.reload();
            } else {
                alert("Error al actualizar el perfil.");
            }
        } catch (error) {
            alert("Error al procesar la solicitud: " + error.message);
        }
    });
});


</script>


