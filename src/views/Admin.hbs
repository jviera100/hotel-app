<!-- Admin.hbs -->
<!-- carusel -->
<section id="carusel" class="carusel container-fluid">
  <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
    <div class="carousel-indicators">
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>
    <div class="carousel-inner">
      <div class="carousel-item active" id="perfil-carousel">
        <div class="container text-center py-4">
          <h2>Users management</h2>           
          <div class="mb-1">
            <button class="btn btn-outline-success" id="addUserBtn">Add profile</button>             
          </div>            
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Photo</th>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Password</th>
                  <th>Type of user</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {{#each usuarios}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>
                    <img src="/img/{{this.foto}}" alt="Foto del usuario" class="img-fluid img-thumbnail">
                  </td>
                  <td>{{this.username}}</td>
                  <td>{{this.email}}</td>
                  <td>{{this.password}}</td>
                  <td>{{this.tipo_usuario}}</td>                 
                  <td>
                    <button type="button" class="btn btn-outline-warning updateUserBtn">Update profile</button>       
                    <button type="button" class="btn btn-outline-danger deleteUserBtn" data-email="{{this.email}}">Delete profile and reservation</button> 
                  </td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="carousel-item" id="reservas-carousel">
        <div class="container text-center py-4">
          <h2>Reservation management</h2> 
          <div class="mb-1">
            <button class="btn btn-outline-success" id="addReservationBtn">Add reservation</button>
          </div>                                 
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Arrival Date</th>
                  <th>Departure Date</th>
                  <th>Room</th>
                  <th>Customer</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {{#each reservas}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>{{this.fecha_reserva}}</td>
                  <td>{{this.fecha_salida}}</td>
                  <td>{{this.habitacion_numero}}</td>
                  <td>{{this.nombre_usuario}}</td>
                  <td>                     
                    <button type="button" class="btn btn-outline-warning updateReservationBtn" data-id="{{this.id}}">Update reservation</button>
                    <button class="btn btn-outline-danger deleteReservationBtn" data-id="{{this.id}}" data-habitacion-id="{{this.habitacion_id}}">Delete reservation</button>                    
                  </td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="carousel-item" id="habitaciones-carousel">
        <div class="container text-center py-4">
          <h2>Room management</h2>            
          <div class="mb-1">
            <button class="btn btn-outline-success" id="addRoomBtn">Add room</button>             
          </div>          
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Number</th>
                  <th>Type of room</th>
                  <th>Description</th>
                  <th>Price</th>
                  <th>Availability</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {{#each habitaciones}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>{{this.numero}}</td>
                  <td>{{tipoHabitacionTexto this.tipo_habitacion_id}}</td>
                  <td>{{this.descripcion}}</td>
                  <td>{{this.precio}}</td>
                  <td>{{#if this.esta_disponible}}Disponible{{else}}No Disponible{{/if}}</td>
                  <td>
                    <button type="submit" class="btn btn-outline-warning" id="updateRoomBtn">Update room</button>       
                    <button class="btn btn-outline-danger" id="deleteRoomBtn">Delete room</button>
                  </td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
  </div>
</section>


<!-- Modal para PERFIL -->
<div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editProfileModalLabel">Update profile</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Formulario de edición -->
        <form id="editProfileForm">
          <div class="row mb-3">
            <div class="col-md-6">
              <label>see current profile photo</label>
              <img id="fotoTablePreviewModal" src="" alt="Foto de perfil" class="img-fluid">
            </div>
            <div class="col-md-6 d-flex align-items-center">  {{!--flex permite ver el label al lado del input en el formulario del modal --}}
              <label for="foto" class="form-label me-2">upload new profile photo</label>
              <input type="file" name="foto" class="form-control" id="foto">
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
                <label>see new profile photo</label>
                <!-- Nueva imagen seleccionada -->
                <img id="fotoUpLoadPreviewModal" src="" alt="Nueva Foto de perfil" class="img-fluid">
            </div>
          </div>          
          <div class="row mb-3">
            <div class="col-md-6 d-flex align-items-center">
              <label for="username" class="form-label me-2">Name</label>
              <input name="username" class="form-control" id="username">
            </div>
            <div class="col-md-6 d-flex align-items-center">
              <label for="email" class="form-label me-2">Email</label>
              <input type="email" name="email" class="form-control" id="email">
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6 d-flex align-items-center">
              <label for="password" class="form-label me-2">Password</label>
              <input type="password" name="password" class="form-control" id="password">
            </div>
            <div class="col-md-6 d-flex align-items-center">
              <label for="tipo_usuario" class="form-label me-2">Type of user</label>
              <input name="tipo_usuario" class="form-control" id="tipo_usuario">
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" id="saveProfileChangesBtn">Save Changes</button>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>        
      </div>
    </div>
  </div>
</div>

<!-- script logica PERFIL javascript fronted -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const addUserBtn = document.querySelector("#addUserBtn"); // Selector del botón para agregar perfil
    const updateUserBtns = document.querySelectorAll(".updateUserBtn"); // Selector de los botones para actualizar perfil
    const deleteUserBtns = document.querySelectorAll(".deleteUserBtn"); // Selector de los botones para eliminar perfil
    const editUserModal = new bootstrap.Modal(document.getElementById('editProfileModal')); // Instanciar el modal

    // Agregar evento al botón para agregar perfil
    addUserBtn.addEventListener("click", () => {
        window.location.href = "/registro"; // Redirige a la vista de /registro
    });

    // Event listener para los botones de actualizar usuario
    updateUserBtns.forEach(button => {
        button.addEventListener("click", () => {
            // Obtener datos del usuario de la fila de la tabla
            const row = button.closest("tr"); 
            const email = row.querySelector("td:nth-child(4)").textContent;
            const username = row.querySelector("td:nth-child(3)").textContent;
            const password = row.querySelector("td:nth-child(5)").textContent;
            const tipo_usuario = row.querySelector("td:nth-child(6)").textContent;
            const foto = row.querySelector("td:nth-child(2) img").getAttribute("src");       

            // Llenar el formulario con los datos del usuario
            document.getElementById('email').value = email;
            document.getElementById('username').value = username;
            document.getElementById('password').value = password;            
            document.getElementById('tipo_usuario').value = tipo_usuario;  
            document.getElementById('fotoTablePreviewModal').src = foto;          

            // Mostrar el modal de edición
            editUserModal.show();
        });
    });

    // Event listener para los botones de eliminar usuario
    deleteUserBtns.forEach(button => {
        button.addEventListener("click", () => {
            const email = button.getAttribute('data-email');
            handleProfileAction('delete', email);
        });
    });

    // Función para manejar la acción de eliminar perfil
    async function handleProfileAction(action, email) {
        if (!email) {
            alert('Correo electrónico del usuario no disponible.');
            return;
        }

        try {
            let response;
            if (action === 'delete') {
                response = await axios.delete(`/perfil/${email}`);
                if (response.status === 200) {
                    alert("Perfil eliminado con éxito");
                    window.location = `/`; // Redirigir a la página de inicio después de eliminar el perfil
                } else {
                    alert("Ha ocurrido un error al intentar eliminar el perfil.");
                }
            }
        } catch (error) {
            const errorMessage = error.response.data.message || 'Ha ocurrido un error al procesar la solicitud de perfil.';
            alert(errorMessage);
        }
    }

    // Event listener para el cambio en el input de tipo file
    document.getElementById('foto').addEventListener('change', function(event) {
        const file = event.target.files[0]; // Obtener el archivo de imagen seleccionado
        const reader = new FileReader();

        // Manejar el evento de carga del archivo
        reader.onload = function(e) {
            document.getElementById('fotoTablePreviewModal').src = e.target.result; // Mostrar la vista previa de la imagen de la tabla en el modal           
            document.getElementById('fotoUpLoadPreviewModal').src = e.target.result; // Mostrar la vista previa de la nueva imagen subida en el modal
        };

        // Leer el contenido del archivo como URL de datos
        reader.readAsDataURL(file);
    });

    // Event listener para el envío del formulario dentro del modal
    const editUserForm = document.querySelector("#editProfileForm");
    document.querySelector("#saveProfileChangesBtn").addEventListener("click", async () => {
        const formData = new FormData(editUserForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await axios.put(`/perfil/${data.email}`, formData);
            if (response.status === 200) {
                alert("Perfil actualizado con éxito");  

                // Obtener la fila correspondiente en la tabla
                const row = [...document.querySelectorAll("table tbody tr")].find(tr => tr.querySelector("td:nth-child(4)").textContent === data.email);

                if (row) {
                    // Actualizar los campos de la fila
                    row.querySelector("td:nth-child(3)").textContent = data.username;
                    row.querySelector("td:nth-child(5)").textContent = data.password;
                    row.querySelector("td:nth-child(6)").textContent = data.tipo_usuario;

                    // Actualizar la imagen con un timestamp para forzar la recarga
                    const imgElement = row.querySelector("td:nth-child(2) img");
                    imgElement.src = `/img/${data.foto}?t=${new Date().getTime()}`;
                }

                // Cerrar el modal
                editUserModal.hide();             

                window.location.reload(); // Recargar la página para reflejar los cambios
            } else {
                alert("Ha ocurrido un error al intentar actualizar el perfil.");
            }
        } catch (error) {
            const errorMessage = error.response.data.message || 'Ha ocurrido un error al procesar la solicitud de perfil.';
            alert(errorMessage);
        }
    });

});
</script>

<!-- Modal para RESERVA -->
<div class="modal fade" id="reservaModal" tabindex="-1" aria-labelledby="reservaModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reservaModalLabel">Update Reservation</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Formulario de reserva -->
        <form id="reservaForm">
          <div class="mb-3">
            <label for="fechaReserva" class="form-label">Arrival Date</label>
            <input type="date" class="form-control" id="fechaReserva" name="fechaReserva">
          </div>
          <div class="mb-3">
            <label for="fechaSalida" class="form-label">Departure Date</label>
            <input type="date" class="form-control" id="fechaSalida" name="fechaSalida">
          </div>
          <div class="mb-3">
            <label for="habitacionId" class="form-label">Room</label>
            <select class="form-select" id="habitacionId" name="habitacionId">
              <!-- Aquí se cargarán las opciones de habitaciones dinámicamente -->
            </select>
          </div>
          <div class="mb-3">
            <label for="clienteId" class="form-label">Customer</label>
            <select class="form-select" id="clienteId" name="clienteId">
              <!-- Aquí se cargarán las opciones de clientes dinámicamente -->
            </select>
          </div>
        </form>
      </div>     
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary saveReservationChangesBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>


<!-- script lógica RESERVA javascript frontend -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const updateReservationBtns = document.querySelectorAll(".updateReservationBtn");
    const deleteReservationBtns = document.querySelectorAll(".deleteReservationBtn");
    const addReservationBtn = document.getElementById("addReservationBtn");
    const reservaModalElement = document.getElementById('reservaModal');
    const reservaModal = new bootstrap.Modal(reservaModalElement);
    const saveReservationChangesBtn = document.querySelector('.saveReservationChangesBtn');

    // Abrir vista para agregar nueva reserva
    addReservationBtn.addEventListener("click", function() {
      window.location.href = "/reservation-add";
    });

    // Event listener para los botones de actualizar reserva
    updateReservationBtns.forEach(button => {
      button.addEventListener("click", async () => {
          const reservationId = button.getAttribute('data-id');

          try {
              const response = await axios.get(`/reserva/${reservationId}`);
              const reserva = response.data;

              // Populate modal fields with reservation data
              document.getElementById('fechaReserva').value = reserva.fecha_reserva;
              document.getElementById('fechaSalida').value = reserva.fecha_salida;
              document.getElementById('habitacionId').value = reserva.habitacion_id;
              document.getElementById('clienteId').value = reserva.cliente_id;

              // Show the modal
              reservaModal.show();
          } catch (error) {
              alert('Error al cargar los detalles de la reserva.');
          }
      });
  });

    // Guardar cambios de reserva
    saveReservationChangesBtn.addEventListener("click", async function() {
      const reservationId = document.querySelector('.updateReservationBtn[data-id]').getAttribute('data-id');
      const fechaReserva = document.getElementById('fechaReserva').value;
      const fechaSalida = document.getElementById('fechaSalida').value;
      const habitacionId = document.getElementById('habitacionId').value;
      const clienteId = document.getElementById('clienteId').value;
      
      try {
        const response = await axios.put(`/reserva/${reservationId}`, {
          fecha_reserva: fechaReserva,
          fecha_salida: fechaSalida,
          habitacion_id: habitacionId,
          cliente_id: clienteId
        });
        if (response.status === 200) {
          alert('Reserva actualizada con éxito.');
          reservaModal.hide();
          location.reload(); // Recargar la página para reflejar los cambios
        }
      } catch (error) {
        alert('Error al actualizar la reserva.');
      }
    });
    

    // Función para manejar la acción de eliminar reserva
    async function handleReservationAction(action, reservationId, habitacionId) {
      if (!reservationId) {
        alert('ID de la reserva no disponible.');
        return;
      }

      try {
        if (action === 'delete') {
          const response = await axios.delete(`/reserva/${reservationId}`);
          if (response.status === 200) {
            alert("Reserva eliminada con éxito");
            document.querySelector(`tr[data-id="${reservationId}"]`).remove(); // Elimina la fila de la tabla
          } else {
            alert("Ha ocurrido un error al intentar eliminar la reserva.");
          }
        }
      } catch (error) {
        const errorMessage = error.response?.data?.message || 'Ha ocurrido un error al procesar la solicitud de reserva.';
        alert(errorMessage);
      }
    }

    // Event listener para los botones de eliminar reserva
    deleteReservationBtns.forEach(button => {
      button.addEventListener("click", () => {
        const reservationId = button.getAttribute('data-id');
        const habitacionId = button.getAttribute('data-habitacion-id');
        handleReservationAction('delete', reservationId, habitacionId);
      });
    });

 
  });
</script>


<!-- script lógica HABITACION javascript frontend 
<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Event listener for add room button
        document.getElementById('addRoomBtn').addEventListener('click', function() {
            // Logic for adding a room (if needed)
            // Example: Redirect to add room page or show modal for adding a room
            console.log('Add room button clicked');
        });

        // Event listener for update room buttons
        const updateRoomBtns = document.querySelectorAll('#updateRoomBtn');
        updateRoomBtns.forEach(button => {
            button.addEventListener('click', function() {
                const roomId = this.parentElement.parentElement.querySelector('td:first-child').textContent;
                // Example: Redirect to update room page or show modal for updating a room
                console.log(`Update room button clicked for room with ID: ${roomId}`);
            });
        });

        // Event listener for delete room buttons
        const deleteRoomBtns = document.querySelectorAll('#deleteRoomBtn');
        deleteRoomBtns.forEach(button => {
            button.addEventListener('click', async function() {
                const roomId = this.parentElement.parentElement.querySelector('td:first-child').textContent;
                try {
                    const confirmDelete = confirm(`Are you sure you want to delete room with ID ${roomId}?`);
                    if (confirmDelete) {
                        // Example: Perform AJAX request to delete room
                        const response = await fetch(`/rooms/${roomId}`, {
                            method: 'DELETE',
                        });
                        if (response.ok) {
                            alert('Room deleted successfully');
                            // Example: Refresh or update the room list
                            window.location.reload();
                        } else {
                            throw new Error('Failed to delete room');
                        }
                    }
                } catch (error) {
                    console.error('Error deleting room:', error);
                    alert('Error deleting room');
                }
            });
        });
    });
</script>

-->









