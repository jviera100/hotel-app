<!-- Customer.hbs -->
<!-- carusel -->
<section id="carusel" class="carusel container-fluid">
  <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
    <div class="carousel-indicators">
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>      
    </div>
    <div class="carousel-inner">      
      
      <div class="carousel-item active" id="habitaciones-carousel">
        <div class="container text-center py-4">
          <h2>Room Management</h2>
          <!-- Filters -->
          <div class="row mb-3">
            <div class="col-md-4">
              <label for="filterType" class="form-label">Filter by Type:</label>
              <select id="filterType" class="form-select">
                <option value="">All</option>
                <!-- Populate room type options dynamically or statically here -->
                <option value="1">Single</option>
                <option value="2">Double</option>
                <option value="3">Suite</option>
              </select>
            </div>
            <div class="col-md-4">
              <label for="filterPrice" class="form-label">Filter by Price:</label>
              <input type="number" id="filterPrice" class="form-control" placeholder="Max Price">
            </div>
            <div class="col-md-4">
              <label for="searchNumber" class="form-label">Search by Number:</label>
              <input type="text" id="searchNumber" class="form-control" placeholder="Room Number">
            </div>
          </div>
          <!-- Room Table -->
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Number</th>
                  <th>Type of Room</th>
                  <th>Description</th>
                  <th>Price</th>
                  <th>Availability</th>
                </tr>
              </thead>
              <tbody id="roomTableBody">
                {{#each habitaciones}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>{{this.numero}}</td>
                  <td>{{tipoHabitacionTexto this.tipo_habitacion_id}}</td>
                  <td>{{this.descripcion}}</td>
                  <td>{{this.precio}}</td>
                  <td>{{disponibilidadTexto this.disponibilidad}}</td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
        <div class="pagination">
            <button onclick="previousPage()">Anterior</button>
            <span id="pageNumber">1</span>
            <button onclick="nextPage()">Siguiente</button>
        </div>
      </div>


      <div class="carousel-item" id="reservas-carousel">
        <div class="container text-center py-4">
          <h2>Reservation management</h2> 
          <div class="mb-1">
            <button class="btn btn-outline-success" id="addReservationBtn">Add reservation</button>
          </div>                                 
          <div class="table-responsive">
            <table class="table table-sm table-dark w-100">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Arrival Date</th>
                  <th>Departure Date</th>
                  <th>Room</th>
                  <th>Customer</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {{#each reservas}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>{{this.fecha_reserva}}</td>
                  <td>{{this.fecha_salida}}</td>
                  <td>{{this.habitacion_numero}}</td>
                  <td>{{this.nombre_usuario}}</td>
                  <td>                     
                    {{!-- <button type="button" class="btn btn-outline-warning updateReservationBtn" data-id="{{this.id}}">Update reservation</button> --}}
                    <button class="btn btn-outline-danger deleteReservationBtn" data-id="{{this.id}}" data-habitacion-id="{{this.habitacion_id}}">Delete reservation</button>                    
                  </td>
                </tr>
                {{/each}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
  </div>
</section>



<!-- Modal para actualizar RESERVA no abre porque comente boton actualizar reserva del carousel pero no comentar el modal o habra inconsistencia y no podra agregar o eliminar  -->
<div class="modal fade" id="reservaModal" tabindex="-1" aria-labelledby="reservaModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reservaModalLabel">Update Reservation</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Formulario de reserva -->
        <form id="reservaForm">
          <div class="mb-3">
            <label for="fechaReserva" class="form-label">Arrival Date</label>
            <input type="date" class="form-control" id="fechaReserva" name="fechaReserva">
          </div>
          <div class="mb-3">
            <label for="fechaSalida" class="form-label">Departure Date</label>
            <input type="date" class="form-control" id="fechaSalida" name="fechaSalida">
          </div>
          <div class="mb-3">
            <label for="habitacionId" class="form-label">Room</label>
            <select class="form-select" id="habitacionId" name="habitacionId">
              <!-- Aquí se cargarán las opciones de habitaciones dinámicamente -->
            </select>
          </div>
          <div class="mb-3">
            <label for="clienteId" class="form-label">Customer</label>
            <select class="form-select" id="clienteId" name="clienteId">
              <!-- Aquí se cargarán las opciones de clientes dinámicamente -->
            </select>
          </div>
        </form>
      </div>     
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary saveReservationChangesBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>


<!-- script lógica RESERVA javascript frontend solo agrega y elimina -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const updateReservationBtns = document.querySelectorAll(".updateReservationBtn");
    const deleteReservationBtns = document.querySelectorAll(".deleteReservationBtn");
    const addReservationBtn = document.getElementById("addReservationBtn");
    const reservaModalElement = document.getElementById('reservaModal');
    const reservaModal = new bootstrap.Modal(reservaModalElement);
    const saveReservationChangesBtn = document.querySelector('.saveReservationChangesBtn');

    // Abrir vista para agregar nueva reserva
    addReservationBtn.addEventListener("click", function() {
      window.location.href = "/reservation-add";
    });

    // Event listener para los botones de actualizar reserva
    updateReservationBtns.forEach(button => {
      button.addEventListener("click", async () => {
          const reservationId = button.getAttribute('data-id');

          try {
              const response = await axios.get(`/reserva/${reservationId}`);
              const reserva = response.data;

              // Populate modal fields with reservation data
              document.getElementById('fechaReserva').value = reserva.fecha_reserva;
              document.getElementById('fechaSalida').value = reserva.fecha_salida;
              document.getElementById('habitacionId').value = reserva.habitacion_id;
              document.getElementById('clienteId').value = reserva.cliente_id;

              // Show the modal
              reservaModal.show();
          } catch (error) {
              alert('Error al cargar los detalles de la reserva.');
          }
      });
  });

    // Guardar cambios de reserva
    saveReservationChangesBtn.addEventListener("click", async function() {
      const reservationId = document.querySelector('.updateReservationBtn[data-id]').getAttribute('data-id');
      const fechaReserva = document.getElementById('fechaReserva').value;
      const fechaSalida = document.getElementById('fechaSalida').value;
      const habitacionId = document.getElementById('habitacionId').value;
      const clienteId = document.getElementById('clienteId').value;
      
      try {
        const response = await axios.put(`/reserva/${reservationId}`, {
          fecha_reserva: fechaReserva,
          fecha_salida: fechaSalida,
          habitacion_id: habitacionId,
          cliente_id: clienteId
        });
        if (response.status === 200) {
          alert('Reserva actualizada con éxito.');
          reservaModal.hide();
          location.reload(); // Recargar la página para reflejar los cambios
        }
      } catch (error) {
        alert('Error al actualizar la reserva.');
      }
    });
    

    // Función para manejar la acción de eliminar reserva
    async function handleReservationAction(action, reservationId, habitacionId) {
      if (!reservationId) {
        alert('ID de la reserva no disponible.');
        return;
      }

      try {
        if (action === 'delete') {
          const response = await axios.delete(`/reserva/${reservationId}`);
          if (response.status === 200) {
            alert("Reserva eliminada con éxito");
            document.querySelector(`tr[data-id="${reservationId}"]`).remove(); // Elimina la fila de la tabla
          } else {
            alert("Ha ocurrido un error al intentar eliminar la reserva.");
          }
        }
      } catch (error) {
        const errorMessage = error.response?.data?.message || 'Ha ocurrido un error al procesar la solicitud de reserva.';
        alert(errorMessage);
      }
    }

    // Event listener para los botones de eliminar reserva
    deleteReservationBtns.forEach(button => {
      button.addEventListener("click", () => {
        const reservationId = button.getAttribute('data-id');
        const habitacionId = button.getAttribute('data-habitacion-id');
        handleReservationAction('delete', reservationId, habitacionId);
      });
    });

 
  });
</script>

<!-- JavaScript para la lógica de filtros, búsqueda y paginación -->
<script>
    let currentPage = 1;
    let roomsPerPage = 5; // Número de habitaciones por página
    let filteredRooms = [];

    function filterRooms() {
        const type = document.getElementById('filterType').value;
        const maxPrice = document.getElementById('filterPrice').value;
        const number = document.getElementById('searchNumber').value.trim();

        // Filtrar habitaciones basadas en los criterios
        filteredRooms = rooms.filter(room => {
            const matchesType = type === '' || room.tipo_habitacion_id == type;
            const matchesPrice = maxPrice === '' || room.precio <= parseInt(maxPrice);
            const matchesNumber = number === '' || room.numero.includes(number);
            return matchesType && matchesPrice && matchesNumber;
        });

        currentPage = 1;
        displayRooms();
    }

    function displayRooms() {
        const startIndex = (currentPage - 1) * roomsPerPage;
        const endIndex = startIndex + roomsPerPage;
        const toDisplay = filteredRooms.slice(startIndex, endIndex);

        const tableBody = document.getElementById('roomTableBody');
        tableBody.innerHTML = '';

        toDisplay.forEach(room => {
            const row = `<tr>
                <td>${room.id}</td>
                <td>${room.numero}</td>
                <td>${tipoHabitacionTexto(room.tipo_habitacion_id)}</td>
                <td>${room.descripcion}</td>
                <td>${room.precio}</td>
                <td>${room.disponibilidad ? 'Disponible' : 'No disponible'}</td>
            </tr>`;
            tableBody.innerHTML += row;
        });

        updatePagination();
    }

    function nextPage() {
        if ((currentPage * roomsPerPage) < filteredRooms.length) {
            currentPage++;
            displayRooms();
        }
    }

    function previousPage() {
        if (currentPage > 1) {
            currentPage--;
            displayRooms();
        }
    }

    function updatePagination() {
        const totalPages = Math.ceil(filteredRooms.length / roomsPerPage);
        document.getElementById('pageNumber').textContent = currentPage;
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Suponiendo que 'rooms' es la variable que contiene todas las habitaciones
        filteredRooms = rooms; // Inicializar con todas las habitaciones
        displayRooms();
    });

    document.getElementById('filterType').addEventListener('change', filterRooms);
    document.getElementById('filterPrice').addEventListener('input', filterRooms);
    document.getElementById('searchNumber').addEventListener('input', filterRooms);
</script>



