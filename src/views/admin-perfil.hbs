
<!-- logica javascript fronted -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const addUserBtn = document.querySelector("#addUserBtn"); // Selector del botón para agregar perfil
    const updateUserBtns = document.querySelectorAll(".updateUserBtn"); // Selector de los botones para actualizar perfil
    const deleteUserBtns = document.querySelectorAll(".deleteUserBtn"); // Selector de los botones para eliminar perfil
    const editUserModal = new bootstrap.Modal(document.getElementById('editProfileModal')); // Instanciar el modal

    // Agregar evento al botón para agregar perfil
    addUserBtn.addEventListener("click", () => {
        window.location.href = "/admin/registro"; // Redirige a la vista de /admin/registro
    });

    // Event listener para los botones de actualizar usuario
    updateUserBtns.forEach(button => {
        button.addEventListener("click", () => {
            // Obtener datos del usuario de la fila de la tabla
            const row = button.closest("tr"); 
            const email = row.querySelector("td:nth-child(4)").textContent;
            const username = row.querySelector("td:nth-child(3)").textContent;
            const password = row.querySelector("td:nth-child(5)").textContent;
            const tipo_usuario = row.querySelector("td:nth-child(6)").textContent;
            const foto = row.querySelector("td:nth-child(2) img").getAttribute("src");       

            // Llenar el formulario con los datos del usuario
            document.getElementById('email').value = email;
            document.getElementById('username').value = username;
            document.getElementById('password').value = password;            
            document.getElementById('tipo_usuario').value = tipo_usuario;  
            document.getElementById('fotoTablePreviewModal').src = foto;          

            // Mostrar el modal de edición
            editUserModal.show();
        });
    });

    // Event listener para los botones de eliminar usuario
    deleteUserBtns.forEach(button => {
        button.addEventListener("click", () => {
            const email = button.getAttribute('data-email');
            handleProfileAction('delete', email);
        });
    });

    // Función para manejar la acción de eliminar perfil
    async function handleProfileAction(action, email) {
        if (!email) {
            alert('Correo electrónico del usuario no disponible.');
            return;
        }

        try {
            let response;
            if (action === 'delete') {
                response = await axios.delete(`/perfil/${email}`);
                if (response.status === 200) {
                    alert("Perfil eliminado con éxito");
                    window.location = `/`; // Redirigir a la página de inicio después de eliminar el perfil
                } else {
                    alert("Ha ocurrido un error al intentar eliminar el perfil.");
                }
            }
        } catch (error) {
            const errorMessage = error.response.data.message || 'Ha ocurrido un error al procesar la solicitud de perfil.';
            alert(errorMessage);
        }
    }

    // Event listener para el cambio en el input de tipo file
    document.getElementById('foto').addEventListener('change', function(event) {
        const file = event.target.files[0]; // Obtener el archivo de imagen seleccionado
        const reader = new FileReader();

        // Manejar el evento de carga del archivo
        reader.onload = function(e) {
            document.getElementById('fotoTablePreviewModal').src = e.target.result; // Mostrar la vista previa de la imagen de la tabla en el modal           
            document.getElementById('fotoUpLoadPreviewModal').src = e.target.result; // Mostrar la vista previa de la nueva imagen subida en el modal
        };

        // Leer el contenido del archivo como URL de datos
        reader.readAsDataURL(file);
    });

    // Event listener para el envío del formulario dentro del modal
    const editUserForm = document.querySelector("#editProfileForm");
    document.querySelector("#saveProfileChangesBtn").addEventListener("click", async () => {
        const formData = new FormData(editUserForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await axios.put(`/perfil/${data.email}`, formData);
            if (response.status === 200) {
                alert("Perfil actualizado con éxito");  

                // Obtener la fila correspondiente en la tabla
                const row = [...document.querySelectorAll("table tbody tr")].find(tr => tr.querySelector("td:nth-child(4)").textContent === data.email);

                if (row) {
                    // Actualizar los campos de la fila
                    row.querySelector("td:nth-child(3)").textContent = data.username;
                    row.querySelector("td:nth-child(5)").textContent = data.password;
                    row.querySelector("td:nth-child(6)").textContent = data.tipo_usuario;

                    // Actualizar la imagen con un timestamp para forzar la recarga
                    const imgElement = row.querySelector("td:nth-child(2) img");
                    imgElement.src = `/img/${data.foto}?t=${new Date().getTime()}`;
                }

                // Cerrar el modal
                editUserModal.hide();             

                window.location.reload(); // Recargar la página para reflejar los cambios
            } else {
                alert("Ha ocurrido un error al intentar actualizar el perfil.");
            }
        } catch (error) {
            const errorMessage = error.response.data.message || 'Ha ocurrido un error al procesar la solicitud de perfil.';
            alert(errorMessage);
        }
    });

});
</script>